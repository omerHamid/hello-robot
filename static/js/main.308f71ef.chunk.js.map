{"version":3,"sources":["components/Card.js","components/SearchBar.js","components/Container.js","App.js","serviceWorker.js","index.js"],"names":["Card","cards","className","map","card","index","key","draggable","alt","src","id","name","email","SearchBar","ogCardsCopy","setCards","useState","scrollVar","setIsScroll","useEffect","window","addEventListener","scrollY","type","placeholder","onChange","e","filteredCards","filter","robot","toLowerCase","includes","target","value","length","Container","setCopy","axios","get","then","res","data","catch","err","console","log","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"qOAkBeA,MAff,YAAwB,IAATC,EAAQ,EAARA,MACb,OACE,yBAAKC,UAAU,aACF,IAARD,EAAYA,EAAME,KAAI,SAACC,EAAMC,GAAP,OACvB,yBAAKC,IAAKD,EAAQH,UAAU,QAC1B,yBAAKK,UAAW,QAAQC,IAAI,GAAGC,IAAG,+BAAkC,GAARL,EAAKM,GAA/B,uBADpC,IAC+F,yBAAKR,UAAU,QAC1G,4BAAKE,EAAKO,MACV,4BAAKP,EAAKQ,YAGb,wBAAIV,UAAU,YAAd,iBAAuC,6BAAvC,QCWMW,MAtBf,YAA6C,IAAzBC,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,SAAW,EACXC,oBAAS,GADE,mBACnCC,EADmC,KACxBC,EADwB,KAe1C,OAPAC,qBAAU,WACRC,OAAOC,iBAAiB,UAAU,WAChC,IAAMJ,EAAUG,OAAOE,QACNJ,EAAjBD,GAAW,UAEZ,IAGD,yBAAKf,UAAYe,EAA0B,kBAAd,aAC3B,2BAAOM,KAAK,SAASC,YAAY,mBAAmBC,SAdjC,SAACC,GACtB,IAAMC,EAAcb,EAAYc,QAAO,SAAAC,GAAK,OAAIA,EAAMlB,KAAKmB,cAAcC,SAASL,EAAEM,OAAOC,MAAMH,kBACjGH,EAAcO,OAAO,EAAInB,EAASY,GAAiBZ,EAAS,Q,iBCuBjDoB,MAzBf,WAAsB,IAAD,EACKnB,mBAAS,IADd,mBACZf,EADY,KACLc,EADK,OAEWC,mBAAS,IAFpB,mBAEZF,EAFY,KAECsB,EAFD,KAgBnB,OAbAjB,qBAAU,WACRkB,IACCC,IAAI,8CACJC,MAAK,SAAAC,GACJ,IAAMC,EAAKD,EAAIC,KACf1B,EAAS0B,GACTL,EAAQK,MAETC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QAC1B,IAKA,yBAAKzC,UAAU,aACb,4BAAQA,UAAU,UAAS,6CAC3B,kBAAC,EAAD,CAAWY,YAAaA,EAAaC,SAAUA,IAC/C,kBAAC,EAAD,CAAMd,MAAOA,MCdF6C,MARf,WACE,OACE,yBAAK5C,UAAU,OACb,kBAAC,EAAD,QCMY6C,QACW,cAA7B3B,OAAO4B,SAASC,UAEe,UAA7B7B,OAAO4B,SAASC,UAEhB7B,OAAO4B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdlB,OAAM,SAAAmB,GACLjB,QAAQiB,MAAMA,EAAMC,c","file":"static/js/main.308f71ef.chunk.js","sourcesContent":["import React from 'react'\n\n\nfunction Card({cards}) {\n  return (\n    <div className=\"cardSpace\">\n       { cards!==0 ? cards.map((card, index) => \n        <div key={index}  className=\"card\">\n          <img draggable =\"false\" alt=\"\" src={`https://robohash.org/${card.id*10}.png?size=180x180`}/> <div className=\"text\">\n            <h3>{card.name}</h3>\n            <h5>{card.email}</h5> \n          </div>\n        </div> )\n        :<h1 className=\"noRobots\">no such robots<br/>:(</h1>}\n   </div>\n  )\n}\n\nexport default Card\n","import React, {useState, useEffect} from 'react'\n\nfunction SearchBar({ogCardsCopy, setCards}) {\n  const [scrollVar, setIsScroll]=useState(false)\n\n  const handleTextChange=(e) => {\n    const filteredCards=ogCardsCopy.filter(robot => robot.name.toLowerCase().includes(e.target.value.toLowerCase()))\n    filteredCards.length>0 ? setCards(filteredCards) : setCards(0)\n  }\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", () => {\n      const scrollVar=window.scrollY;\n      scrollVar>=155 ? setIsScroll(true) : setIsScroll(false);\n    })\n  }, [])\n  \n  return (\n    <div className={!scrollVar ? \"searchDiv\" : \"searchDivScroll\"}>\n      <input type=\"search\" placeholder=\"search robots...\" onChange={handleTextChange}/>\n    </div>\n  )\n}\n\nexport default SearchBar\n","import React, {useState, useEffect} from 'react'\nimport Card from './Card';\nimport SearchBar from './SearchBar';\nimport axios from 'axios';\n\nfunction Container() {\n  const [cards, setCards]=useState([]);\n  const [ogCardsCopy, setCopy]= useState([]);\n  useEffect(() => {\n    axios\n    .get(\"https://jsonplaceholder.typicode.com/users\")\n    .then(res => {\n      const data=res.data;\n      setCards(data);\n      setCopy(data);\n    })\n    .catch(err => console.log(err));\n  },[])\n\n \n  \n  return (\n    <div className=\"container\">\n      <header className=\"header\"><h1>Hello Robots</h1></header>\n      <SearchBar ogCardsCopy={ogCardsCopy} setCards={setCards}  />\n      <Card cards={cards}/>\n    </div>\n  )\n}\n\nexport default Container\n","  import React from 'react';\n  import Container from './components/Container'\n\n  function App() {\n    return (\n      <div className=\"App\">\n        <Container />\n      </div>\n    );\n  }\n\n  export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}